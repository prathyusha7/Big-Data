import org.apache.spark.mllib.tree.DecisionTree
import org.apache.spark.mllib.tree.model.DecisionTreeModel
import org.apache.spark.mllib.util.MLUtils
import org.apache.spark.mllib.feature.PCA
import org.apache.spark.mllib.util.MLUtils
import org.apache.spark.rdd.RDD
import org.apache.spark.SparkContext
import org.apache.spark.mllib.evaluation.MulticlassMetrics
import org.apache.spark.mllib.linalg.Vectors

  val data = MLUtils.loadLibSVMFile(sc, "/FileStore/tables/a2b3zbcl1490043381173/a2.txt")

val pca = new PCA(10).fit(data.map(_.features))

val projected = data.map(p => p.copy(features = pca.transform(p.features)))

val splits = projected.randomSplit(Array(0.8, 0.2))
val (trainingData, testData) = (splits(0), splits(1))

val numClasses = 5
val categoricalFeaturesInfo = Map[Int, Int]()
val impurity = "gini"
val maxDepth = 5
val maxBins = 32

val model = DecisionTree.trainClassifier(trainingData, numClasses, categoricalFeaturesInfo,
  impurity, maxDepth, maxBins)

val labelAndPreds = testData.map { p =>
  val prediction = model.predict(p.features)
  (p.label, prediction)
}
val testErr = labelAndPreds.filter(r => r._1 != r._2).count().toDouble / testData.count()
println("Test Accuracy = " + (100-testErr))